apply plugin: 'com.android.application'
apply plugin: 'idea'
apply plugin: 'android-apt'


//apt {
//    arguments {
//        variantName variant.name
//        resourcePackageName android.defaultConfig.applicationId
//    }
//}

//configurations {
//    apt
//}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"

    defaultConfig {
        applicationId "com.oridev.variantsstubsgenerator.sample"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {

        flavor1 {
        }

        flavor2 {
        }
    }

    sourceSets {
//    apt{
//        java.srcDir "${buildDir}/generated/source/apt"
//    }
        apt {
            java {
                srcDirs "${buildDir}/generated/source/apt"
            }
        }
    }

//    applicationVariants.all { variant ->
//        variant.mergeResources.doFirst {
//            if (project.ext.has(variant.productFlavors.name)) {
//                if (project.ext[variant.productFlavors.name].debugRes != null) {
//                    android.sourceSets.debug.res.srcDirs = project.ext[variant.productFlavors.name].debugRes
//                } else {
//                    android.sourceSets.debug.res.srcDirs = ['src/debug/res']
//                }
//
//                if (project.ext[variant.productFlavors.name].releaseRes != null) {
//                    android.sourceSets.release.res.srcDirs = project.ext[variant.productFlavors.name].releaseRes
//                } else {
//                    android.sourceSets.release.res.srcDirs = ['src/release/res']
//                }
//            } else {
//                android.sourceSets.debug.res.srcDirs = ['src/debug/res']
//                android.sourceSets.release.res.srcDirs = ['src/release/res']
//            }
//        }
//    }
    /* */
//    applicationVariants.all { variant ->
//        def aptOutputDir = project.file("build/generated/source/apt")
//        def aptOutput = new File(aptOutputDir, variant.dirName)
//
////        sourceSets {
////            apt {
////                java {
////                    srcDir aptOutput
////                }
////            }
////        }
//
////        variant.sourceSets.java.srcDirs += aptOutput.getPath()
//
////        variant.javaCompile.options.compilerArgs += [
////                '-processorpath', configurations.compile.getAsPath(),
////                '-s', aptOutput
////        ]
////        variant.javaCompile.source = variant.javaCompile.source.filter { p ->
////            return !p.getPath().startsWith(aptOutputDir.getPath())
////        }
////
////        variant.javaCompile.doFirst {
////            aptOutput.mkdirs()
////        }
//    }
}


dependencies {

    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile 'com.android.support:appcompat-v7:24.2.0'

    compile project(':variantsstubsgenerator-annotation')
    apt project(':variantsstubsgenerator-compiler')

    compile 'com.jakewharton:butterknife:8.2.1'
    apt 'com.jakewharton:butterknife-compiler:8.2.1'

    testCompile 'junit:junit:4.12'

}


//def getSourceSetName(variant) {
//    return new File(variant.dirName).getName();
//}
